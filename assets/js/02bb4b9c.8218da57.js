(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.a.createElement(f,s(s({ref:t},p),{},{components:n})):a.a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var p=2;p<o;p++)c[p]=n[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=(n(0),n(114));const o={title:"React"},c={unversionedId:"typescript/react",id:"typescript/react",isDocsHomePage:!1,title:"React",description:"- \u0420\u0435\u0444\u044b, \u0441\u0442\u0435\u0439\u0442 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0437\u0430\u0445\u0432\u0430\u0442 \u0442\u0438\u043f\u0430\u043c\u0438",source:"@site/docs/typescript/react.md",slug:"/typescript/react",permalink:"/codestyle/docs/typescript/react",editUrl:"https://github.com/mihanizm56/codestyle/tree/master/docs/typescript/react.md",version:"current",sidebar:"someSidebar",previous:{title:"\u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u0435\u0439\u0441\u043e\u0432 javascript",permalink:"/codestyle/docs/typescript/javascript"},next:{title:"Redux",permalink:"/codestyle/docs/typescript/redux"}},s=[],i={toc:s};function p(e){let{components:t,...n}=e;return Object(a.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"\u0420\u0435\u0444\u044b, \u0441\u0442\u0435\u0439\u0442 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0437\u0430\u0445\u0432\u0430\u0442 \u0442\u0438\u043f\u0430\u043c\u0438")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"    const [searchValue, setSearchValue] = useState('');\n    const containerRef = useRef(null);\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u043c\u0435\u043d\u0443\u044e\u0442\u0441\u044f PropsType, \u043a\u0440\u043e\u043c\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043a\u043e\u0433\u0434\u0430 \u0442\u0438\u043f \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d - \u0442\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 ")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"export type SelectOptionType = {...}\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"\u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043d\u0430 \u0441\u0442\u0435\u0439\u0442, \u043f\u0440\u0438 \u0438\u0445 \u043d\u0430\u043b\u0438\u0447\u0438\u0438")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import React, { memo, useMemo } from 'react';\nimport classnames from 'classnames/bind';\nimport { WithScreenResizePropsType } from '@wildberries/ui-kit';\nimport { noop } from '@/_utils/noop';\nimport { SellerBonusStorageDataType } from '../../_redux/seller-bonus-module';\nimport { getUpdatedDateString } from '../../../_utils/get-updated-date-string';\nimport { BonusInfo } from './_components/bonus-info';\nimport styles from './index.module.scss';\n\nconst cn = classnames.bind(styles);\n\nconst BLOCK_NAME = 'Seller-bonus-content';\n\ntype PropsType = {\n  refreshData?: () => void;\n  isLoading: boolean;\n  data: SellerBonusStorageDataType;\n} & WithScreenResizePropsType;\n\nexport const WrappedComponent = memo(\n  ({\n    refreshData,\n    isLoading,\n    data: { updatedAt, startDate, finishDate, stats, wholeList },\n  }: PropsType) => {\n    const { lastUpdatedFullString } = useMemo(\n      () => getUpdatedDateString(updatedAt),\n      [updatedAt],\n    );\n\n    return (\n      <div className={cn(BLOCK_NAME)}>\n        <BonusInfo\n          chartData={wholeList}\n          finishDate={finishDate}\n          isLoading={isLoading}\n          lastUpdatedFullString={lastUpdatedFullString}\n          onNavigateToBonus={noop} // just mock\n          refreshData={refreshData}\n          screenType=\"mobile\" // just mock\n          startDate={startDate}\n          stats={stats}\n        />\n      </div>\n    );\n  },\n);\n\n")))}p.isMDXComponent=!0}}]);